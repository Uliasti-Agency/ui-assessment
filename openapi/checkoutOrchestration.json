{
  "openapi": "3.0.1",
  "info": {
    "title": "Checkout Orchestration API",
    "description": "This service provides functionality to transform a Cart into an Order."
  },
  "servers": [
    {
      "url": "http://docker:8442/checkout-orchestration/v1",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Checkout",
      "description": "the Checkout API"
    }
  ],
  "paths": {
    "/orders": {
      "get": {
        "tags": [
          "Checkout"
        ],
        "summary": "gets all Orders",
        "description": "Paginated. Not available to guests, only to order owner or Order Admin",
        "operationId": "getOrders",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Id of the user that requires orders",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "statusFilter",
            "in": "query",
            "description": "Return orders with different status (DRAFT, ORDERED). If statusFilter is empty, return all orders. Can be empty.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "ORDERED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Checkout"
        ],
        "summary": "Creates an Order in preview status",
        "description": "creates an Order in preview status. The cart is not deleted at this point.",
        "operationId": "createOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Order created in preview status. It is ready to be placed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          },
          "206": {
            "description": "Order created in preview status. It is not yet ready to be placed, some properties have not been set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          },
          "403": {
            "description": "You tried to set read-only parameters (e.g. a price)"
          },
          "404": {
            "description": "Cart not found"
          },
          "422": {
            "description": "Cart content makes it not ready for checkout. (e.g. stock or price missing)"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "Checkout"
        ],
        "summary": "Retrieves an Order",
        "description": "Retrieves an Order",
        "operationId": "getOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Order. Cannot be empty.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "value of the ETag header received in the previous request",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order is found",
            "headers": {
              "ETag": {
                "description": "It identifiers a specific version of a resource",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          },
          "206": {
            "description": "Order is in preview status, and it is not yet ready to be placed, some properties have not been set.",
            "headers": {
              "ETag": {
                "description": "It identifiers a specific version of a resource",
                "style": "simple",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          },
          "304": {
            "description": "Order did not change since last request"
          },
          "404": {
            "description": "Order not found"
          },
          "422": {
            "description": "Order is in preview status. Related cart content makes it not ready for checkout. (e.g. stock or price missing)"
          }
        }
      },
      "patch": {
        "tags": [
          "Checkout"
        ],
        "summary": "Updates an Order",
        "description": "Updates an Order",
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of Order. Cannot be empty.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "value of the ETag header received in the previous request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Order Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          },
          "403": {
            "description": "You tried to set read-only parameters (e.g. a price)"
          },
          "404": {
            "description": "Order not found"
          },
          "412": {
            "description": "Order was changed after your last request. Your version was stale"
          },
          "417": {
            "description": "Change could not be performed. (e.g. you tried to change orderStatus to Placed when shippingAddress was not set.)"
          },
          "428": {
            "description": "If-Match header is empty. If-Match header must contain your cached Order ETag value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AttributeValueObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Human-Readable unique identifier of the AttributeValue.",
            "example": "black"
          },
          "name": {
            "type": "object",
            "description": "value of the AttributeValue.",
            "example": "Black"
          }
        },
        "description": "Actual values of the possible choiceAttributes defined at the Multi Variant Product level.",
        "example": "[{id: red, name: Red}, {id: black, name: Black}]"
      },
      "AvailabilityDto": {
        "required": [
          "articleId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Availability.",
            "example": "5dc618af-af49-4adc-bccd-4d17aeff7526"
          },
          "articleId": {
            "maxLength": 50,
            "minLength": 3,
            "type": "string",
            "description": "Unique identifier of the article.",
            "example": "123"
          },
          "quantity": {
            "type": "number",
            "description": "Non-negative available quantity of the article.",
            "example": 10
          },
          "status": {
            "type": "string",
            "description": "Availability stock status of the article.",
            "example": "IN_STOCK",
            "enum": [
              "ALWAYS_AVAILABLE",
              "NOT_AVAILABLE",
              "IN_STOCK"
            ]
          },
          "replenishmentTime": {
            "type": "integer",
            "description": "Standard lead time in days for article quantity replenishment.",
            "format": "int32",
            "example": 14,
            "default": 0
          }
        },
        "description": "Availability"
      },
      "CartDto": {
        "required": [
          "currencyId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Cart.",
            "example": "4b7e6hjA-107b-476b-816a-51hh256a30d1"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the User.",
            "example": "4b7e6hjA-107b-476b-816a-51hh256a30d1"
          },
          "items": {
            "type": "array",
            "description": "List of the Items in the Cart.",
            "items": {
              "$ref": "#/components/schemas/ItemDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total value of all Items in the Cart.",
            "example": 1050.75
          },
          "orderable": {
            "type": "boolean",
            "description": "Indicates whether all content in the Cart can be ordered and proceeded to checkout",
            "example": true
          },
          "currencyId": {
            "type": "string",
            "description": "The currency of the cart.",
            "example": "25dbb90c-04c5-4073-a972-b3381745c951"
          },
          "messages": {
            "type": "array",
            "description": "The messages on the cart.",
            "example": "{level=ERROR, message=Certain items in the cart cannot be ordered}",
            "items": {
              "$ref": "#/components/schemas/MessageDto"
            }
          }
        },
        "description": "Parameters for Order."
      },
      "ChoiceAttributeObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Human-Readable unique identifier of the ChoiceAttribute.",
            "example": "color"
          },
          "name": {
            "type": "object",
            "description": "name of the ChoiceAttribute.",
            "example": "Color"
          },
          "values": {
            "type": "array",
            "description": "Actual values of the possible choiceAttributes defined at the Multi Variant Product level.",
            "example": "[{id: red, name: Red}, {id: black, name: Black}]",
            "items": {
              "$ref": "#/components/schemas/AttributeValueObject"
            }
          }
        },
        "description": "Attributes that change between variants"
      },
      "Image": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Image Type",
            "enum": [
              "GALLERY"
            ]
          },
          "url": {
            "type": "string",
            "description": "URL of the image"
          }
        },
        "description": "Images of the product"
      },
      "ItemDto": {
        "required": [
          "articleId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Item.",
            "example": "2e5c9ba8-956e-476b-816a-49ee128a40c9"
          },
          "articleId": {
            "type": "string",
            "description": "Unique identifier of the Item.",
            "example": "article1"
          },
          "name": {
            "type": "string",
            "description": "Name of the Item.",
            "example": "notebook"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of articles of the Item.",
            "example": 10
          },
          "price": {
            "type": "number",
            "description": "Total price of the Item.",
            "example": 100.1
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit Price of the Item.",
            "example": 10.01
          },
          "availability": {
            "$ref": "#/components/schemas/AvailabilityDto"
          },
          "product": {
            "$ref": "#/components/schemas/ProductEntity"
          },
          "orderable": {
            "type": "boolean",
            "description": "Indicates whether an Item can be ordered",
            "example": true
          },
          "messages": {
            "type": "array",
            "description": "The messages on the item",
            "example": "{level=ERROR, message=Price for this item does not exist}",
            "items": {
              "$ref": "#/components/schemas/MessageDto"
            }
          }
        },
        "description": "List of the Items in the Cart."
      },
      "MessageDto": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "Message level",
            "example": "INFO",
            "enum": [
              "INFO",
              "WARNING",
              "ERROR"
            ]
          },
          "message": {
            "type": "string",
            "description": "Message content",
            "example": "Price for this item does not exist"
          }
        },
        "description": "The messages on the cart.",
        "example": "{level=ERROR, message=Certain items in the cart cannot be ordered}"
      },
      "ProductEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Product.",
            "example": "velox-shirt"
          },
          "name": {
            "type": "string",
            "description": "Name of the product.",
            "example": "Velox Shirt"
          },
          "description": {
            "type": "string",
            "description": "Description of the product",
            "example": "Very nice VELOX branded Polo-Shirt in size XL."
          },
          "longDescription": {
            "type": "string",
            "description": "Long description of the product",
            "example": "Very nice VELOX branded Polo-Shirt in size XL made from cotton in various colours."
          },
          "images": {
            "type": "array",
            "description": "Images of the product",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "choiceAttributes": {
            "type": "array",
            "description": "Attributes that change between variants",
            "items": {
              "$ref": "#/components/schemas/ChoiceAttributeObject"
            }
          },
          "type": {
            "type": "string",
            "description": "Product Type",
            "enum": [
              "PRODUCT",
              "VARIANT",
              "MULTI_VARIANT_PRODUCT"
            ]
          },
          "parentId": {
            "type": "string",
            "description": "Id of a parent MULTI_VARIANT_PRODUCT if a product type is VARIANT",
            "example": "velox-polo-shirt"
          }
        },
        "description": "Catalog information of an item."
      },
      "AddressDto": {
        "required": [
          "address",
          "city",
          "company",
          "country",
          "firstName",
          "lastName",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Address.",
            "example": "a6800895-9a37-4e48-a65a-621eea12d2d4"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the recipient (user)"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the recipient (user)"
          },
          "company": {
            "type": "string",
            "description": "Company where the recipient (user) works"
          },
          "address": {
            "type": "string",
            "description": "Street where the orders will be shipped"
          },
          "city": {
            "type": "string",
            "description": "City where the orders will be shipped"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip code of the address where the orders will be shipped"
          },
          "poBox": {
            "type": "string",
            "description": "Post Office Box of the company where the orders will be shipped"
          },
          "country": {
            "type": "string",
            "description": "Country where the orders will be shipped"
          }
        },
        "description": "Address of the user where the orders will be shipped"
      },
      "ChargeDto": {
        "required": [
          "amount",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of charge",
            "example": "shipping"
          },
          "amount": {
            "type": "number",
            "description": "Charged Amount",
            "example": 4.99
          }
        },
        "description": "charges"
      },
      "OrderDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the Order.",
            "example": "2e5c9ba8-956e-476b-816a-49ee128a40c9"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier of the user.",
            "example": "2e5c9ba8-956e-476b-816a-49ee128a40c9"
          },
          "orderNum": {
            "type": "string",
            "description": "Last portion of the Unique Identifier (id)",
            "example": "49ee128a40c9"
          },
          "createTime": {
            "type": "string",
            "description": "When the Order was created",
            "format": "date-time"
          },
          "entries": {
            "type": "array",
            "description": "List of items that user wants to buy",
            "items": {
              "$ref": "#/components/schemas/OrderEntryDto"
            }
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "charges": {
            "type": "array",
            "description": "charges",
            "items": {
              "$ref": "#/components/schemas/ChargeDto"
            }
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price that user will pay"
          },
          "currencyId": {
            "type": "string",
            "description": "Currency of the order"
          },
          "cartId": {
            "type": "string",
            "description": "Id of the Cart"
          },
          "orderStatus": {
            "type": "string",
            "description": "Order status",
            "enum": [
              "DRAFT",
              "ORDERED"
            ]
          },
          "paymentStatus": {
            "type": "string",
            "description": "Payment status",
            "enum": [
              "NOT_PAID",
              "PAID",
              "REFUNDED"
            ]
          },
          "shipmentStatus": {
            "type": "string",
            "description": "Shipment status",
            "enum": [
              "NOT_SHIPPED",
              "SHIPPED",
              "DELIVERED"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          }
        }
      },
      "OrderEntryDto": {
        "type": "object",
        "properties": {
          "articleId": {
            "type": "string",
            "description": "Id of the Article"
          },
          "articleName": {
            "type": "string",
            "description": "Name of the Article"
          },
          "availability": {
            "$ref": "#/components/schemas/AvailabilityDto"
          },
          "quantity": {
            "type": "number",
            "description": "ordered Quantity"
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit Price"
          },
          "price": {
            "type": "number",
            "description": "Price"
          }
        },
        "description": "List of items that user wants to buy"
      },
      "UserDto": {
        "required": [
          "addressDto",
          "email",
          "firstName",
          "id",
          "lastName",
          "phone"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the user obtained from the Identity and Access Management provider"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the user"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user"
          },
          "addressDto": {
            "$ref": "#/components/schemas/AddressDto"
          }
        },
        "description": "User information"
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}